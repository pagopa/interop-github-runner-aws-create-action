name: "Create GitHub self hosted runner"
description: "Create a GitHub self hosted runner on AWS"

inputs:
  aws_region:
    description: "AWS region code"
    required: true
  iam_role_arn:
    description: "ARN of the IAM role to assume"
    required: true
  ecs_cluster_name:
    description: "ECS cluster"
    required: true
  ecs_task_definition:
    description: "ECS task definition family[:revision] or full ARN"
    required: true
  ecs_task_cpu:
    description: "ECS task cpu"
    required: false
  ecs_task_memory:
    description: "ECS task memory"
    required: false
  ecs_task_max_duration_seconds:
    description: "ECS task max execution time in seconds"
    required: false
  ecs_container_name:
    description: "Name of the gh runner container in the ECS task definition"
    required: true
  ecs_task_subnet_id:
    description: "ID of the subnet where the task will run"
    required: true
  ecs_task_sec_group:
    description: "ID of security group to attach to the task"
    required: true
  pat_token:
    description: "GitHub PAT token to access APIs to manage self hosted runner"
    required: true

outputs:
  runner_name:
    value: ${{ steps.create_github_runner.outputs.runner_name }}
    description: 'Name of the self-hosted runner'
  ecs_task_id:
    value: ${{ steps.create_github_runner.outputs.ecs_task_id }}
    description: 'Id of the ECS task that has been started'

runs:
  using: "composite"
  steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.aws_region }}
        role-to-assume: ${{ inputs.iam_role_arn }}

    - name: Create GitHub Runner
      id: create_github_runner
      shell: bash
      env:
        ECS_TASK_CPU: ${{ inputs.ecs_task_cpu }}
        ECS_TASK_MEMORY: ${{ inputs.ecs_task_memory }}
        ECS_TASK_MAX_DURATION_SECONDS: ${{ inputs.ecs_task_max_duration_seconds }}
      run: |
        set -eo pipefail

        REGISTRATION_TOKEN=$(curl -s \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ inputs.pat_token }}" \
          https://api.github.com/repos/${{ github.repository }}/actions/runners/registration-token | jq ".token" -r)

        RUNNER_NAME="${{ github.run_id }}-${{ matrix.index }}"
        GITHUB_REPOSITORY="https://github.com/${{ github.repository }}"

        echo "{\"awsvpcConfiguration\":{\"assignPublicIp\":\"DISABLED\",
            \"securityGroups\":[\"${{ inputs.ecs_task_sec_group }}\"],
            \"subnets\":[\"${{ inputs.ecs_task_subnet_id }}\"]}}" > network_config.json

        CPU_ENV_CONFIG=""
        MEM_ENV_CONFIG=""
        MAXDURATION_ENV_CONFIG=""

        if [[ -n $ECS_TASK_CPU ]]; then
          CPU_ENV_CONFIG="\"cpu\": ${ECS_TASK_CPU},"
          echo "[DEBUG] CPU_ENV_CONFIG: $CPU_ENV_CONFIG"
        fi
        if [[ -n $ECS_TASK_MEMORY ]]; then
          MEM_ENV_CONFIG="\"memory\": ${ECS_TASK_MEMORY},"
          echo "[DEBUG] MEM_ENV_CONFIG: $MEM_ENV_CONFIG"
        fi
        if [[ -n $ECS_TASK_MAX_DURATION_SECONDS ]]; then
          MAXDURATION_ENV_CONFIG="{\"name\":\"ECS_TASK_MAX_DURATION_SECONDS\",\"value\":\"${ECS_TASK_MAX_DURATION_SECONDS}\"},"
          echo "[DEBUG] MAXDURATION_ENV_CONFIG: $MAXDURATION_ENV_CONFIG"
        fi

        echo "{\"containerOverrides\":[{\"name\":\"${{ inputs.ecs_container_name }}\",
              $CPU_ENV_CONFIG
              $MEM_ENV_CONFIG
              \"environment\":[
                $MAXDURATION_ENV_CONFIG
                {\"name\":\"RUNNER_NAME\",\"value\":\"${RUNNER_NAME}\"},
                {\"name\":\"GITHUB_REPOSITORY\",\"value\":\"${GITHUB_REPOSITORY}\"},
                {\"name\":\"GITHUB_TOKEN\",\"value\":\"${REGISTRATION_TOKEN}\"}]}]}" > overrides.json

        OVERRIDES=$(cat overrides.json)
        echo "[DEBUG] Overrides: $OVERRIDES"


        #  --reference-id "${RUNNER_NAME}" \
        #  --group "${RUNNER_NAME}" \
        ECS_TASK_ID=$(aws ecs run-task \
          --launch-type "FARGATE" \
          --cluster "${{ inputs.ecs_cluster_name }}" \
          --network-configuration file://./network_config.json \
          --task-definition "${{ inputs.ecs_task_definition }}" \
          --overrides file://./overrides.json \
          | jq -r '.tasks[0].taskArn' \
          | cut -d "/" -f 3)

        echo "[INFO] Started ECS task $ECS_TASK_ID"
        echo "ecs_task_id=$(echo $ECS_TASK_ID)" >> $GITHUB_OUTPUT

        echo "[INFO] Waiting for self-hosted runner registration"
        sleep 30

        GITHUB_RUNNER_ID=null
        START_TIME=$(date +%s)
        while [ $(( $(date +%s) - 300 )) -lt $START_TIME ]; do

          echo "[INFO] Waiting for self-hosted runner registration"

          RUNNERS_LIST=$(curl -s \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ inputs.pat_token }}" \
              https://api.github.com/repos/${{ github.repository }}/actions/runners)

          if [ -n "$RUNNERS_LIST" ]; then
            GITHUB_RUNNER_ID=$(echo $RUNNERS_LIST | jq -r '.runners | map(select(.name == "'$RUNNER_NAME'")) | .[].id')

            if [ -n "$GITHUB_RUNNER_ID" ]; then
              echo "[INFO] Self-hosted runner ${RUNNER_NAME} has been added to this repo"
              GITHUB_RUNNER_STATUS=$(curl -s \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ inputs.pat_token }}" \
                https://api.github.com/repos/${{ github.repository }}/actions/runners \
                | jq -r '.runners | map(select(.name == "'$RUNNER_NAME'")) | .[].status')
                echo "[INFO] Self-hosted runner status ${GITHUB_RUNNER_STATUS}"

              break
            fi
          fi

          sleep 10

        done

        if [ -z "$GITHUB_RUNNER_ID" ]; then
          echo "[ERROR] $GITHUB_RUNNER_ID is empty" >&2
          exit 1
        fi

        retry_count=0
        max_retry=5
        labels_have_been_applied=false
        echo "[INFO] Start loop to set label for self-hosted runner ${GITHUB_RUNNER_ID}"
        while [ "$retry_count" -lt "$max_retry" ]; do
          SET_LABEL_OUTPUT=$(curl -s \
            -X PUT \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ inputs.pat_token }}" \
            https://api.github.com/repos/${{ github.repository }}/actions/runners/${GITHUB_RUNNER_ID}/labels \
            -d '{"labels":["run_id:${{ github.run_id }}", "matrix_index:${{matrix.index}}", "task_id:'${ECS_TASK_ID}'", "run_number:${{ github.run_number }}"]}')

          echo "[INFO] Set label API call result ${SET_LABEL_OUTPUT}"
          ERROR_MESSAGE=$(echo $SET_LABEL_OUTPUT | grep "message")
          if [ -z "$ERROR_MESSAGE" ]; then
            echo "[INFO] Labels have been set"
            labels_have_been_applied=true

            break
          else
            echo "[INFO] Labels not yet applied"
            retry_count=$(($retry_count+1))
          fi

          sleep 5
        done

        if [[ "$labels_have_been_applied" = false ]]; then
          echo "[ERROR] Cannot set labels for runner"
          exit 1
        fi
    - name: Create ecs_task_id artifact
      if: always()
      env:
        INDEX: ${{ matrix.index }}
        ECS_TASK_ID: ${{ steps.create_github_runner.outputs.ecs_task_id }}
      shell: bash
      run: |
        set -euo pipefail

        touch ${INDEX}_${ECS_TASK_ID}
    - name: Upload ecs_task_id artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.index}}_ecs_task_id
        path: "${{ matrix.index}}_${{ steps.create_github_runner.outputs.ecs_task_id }}"
        retention-days: 1
